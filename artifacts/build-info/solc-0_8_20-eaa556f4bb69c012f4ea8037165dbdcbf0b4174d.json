{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_20-eaa556f4bb69c012f4ea8037165dbdcbf0b4174d",
  "solcVersion": "0.8.20",
  "solcLongVersion": "0.8.20+commit.a1b79de6",
  "userSourceNameMap": {
    "contracts/PeerProofRegistry.sol": "project/contracts/PeerProofRegistry.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "shanghai",
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/PeerProofRegistry.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ncontract PeerProofRegistry {\n    enum Status { None, Active, Suppressed, Revoked }\n\n    struct Reference {\n        address employee;\n        address reviewer;\n        bytes32 dataHash;\n        uint64  createdAt;\n        Status  status;\n    }\n\n    mapping (bytes32 => Reference) public references;\n\n    event ReferenceCreated(bytes32 indexed refId, address indexed employee, address indexed reviewer, bytes32 dataHash);\n    event ReferenceStatusChanged(bytes32 indexed refId, Status newStatus);\n\n    function createReference(bytes32 refId, address employee, address reviewer, bytes32 dataHash) external {\n        require(refId != bytes32(0), \"bad refId\");\n        require(references[refId].createdAt == 0, \"already exists\");\n        require(employee != address(0), \"bad employee\");\n\n        references[refId] = Reference({\n            employee: employee,\n            reviewer: reviewer,\n            dataHash: dataHash,\n            createdAt: uint64(block.timestamp),\n            status: Status.Active\n        });\n\n        emit ReferenceCreated(refId, employee, reviewer, dataHash);\n    }\n\n    function suppress(bytes32 refId) external {\n        Reference storage r = references[refId];\n        require(r.createdAt != 0, \"not found\");\n        require(msg.sender == r.employee, \"only employee\");\n        require(r.status == Status.Active, \"not active\");\n        r.status = Status.Suppressed;\n        emit ReferenceStatusChanged(refId, r.status);\n    }\n\n    function revoke(bytes32 refId) external {\n        Reference storage r = references[refId];\n        require(r.createdAt != 0, \"not found\");\n        require(msg.sender == r.reviewer, \"only reviewer\");\n        require(r.status == Status.Active, \"not active\");\n        r.status = Status.Revoked;\n        emit ReferenceStatusChanged(refId, r.status);\n    }\n}\n"
      }
    }
  }
}