<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <meta name="author" content="PeerProof"/>	
    <meta name="description" content="PeerProof Dashboard - Manage Your Professional References"/>
    <meta name="keywords" content="PeerProof, Dashboard, References, Blockchain, Professional">	
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>PeerProof Dashboard</title>
    <link rel="shortcut icon" href="images/favicon.ico" type="image/x-icon">
    <link rel="icon" href="images/favicon.ico" type="image/x-icon">
    <link href="https://fonts.googleapis.com/css2?family=Rubik:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="css/bootstrap.min.css" rel="stylesheet">
    <link href="css/flaticon.css" rel="stylesheet">
    <link href="css/style.css" rel="stylesheet"> 
    <link href="css/responsive.css" rel="stylesheet">
    <style>
        body { background-color: #f8fafc; font-family: 'Rubik', sans-serif; }
        .dashboard-header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px 0; box-shadow: 0 4px 20px rgba(0,0,0,0.1); }
        .header-content { display: flex; justify-content: space-between; align-items: center; }
        .logo-section { display: flex; align-items: center; }
        .logo-section img { width: 100px; height: 100px; margin-right: 0; }
        .user-section { 
            display: flex; 
            align-items: center; 
            gap: 20px; 
            position: relative; 
            z-index: 100; 
        }
        .wallet-info { background: rgba(255,255,255,0.1); padding: 8px 16px; border-radius: 25px; font-size: 14px; }
        .notification-badge { 
            position: relative; 
            z-index: 101; 
        }
        .notification-bell { background: rgba(255,255,255,0.2); border: none; color: white; padding: 10px; border-radius: 50%; cursor: pointer; font-size: 18px; }
        .notification-count { position: absolute; top: -5px; right: -5px; background: #ef4444; color: white; border-radius: 50%; width: 20px; height: 20px; font-size: 12px; display: flex; align-items: center; justify-content: center; font-weight: bold; }
        .main-content { padding: 30px 0; }
        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 40px; }
        .stat-card { background: white; border-radius: 15px; padding: 25px; box-shadow: 0 4px 15px rgba(0,0,0,0.08); border-left: 4px solid #d946ef; transition: transform 0.3s ease; }
        .stat-card:hover { transform: translateY(-2px); }
        .stat-number { font-size: 32px; font-weight: 700; color: #1f2937; margin-bottom: 5px; }
        .stat-label { color: #6b7280; font-size: 14px; font-weight: 500; }
        .section-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px; }
        .section-title { font-size: 24px; font-weight: 600; color: #1f2937; margin-bottom: 0; }
        .btn-primary-custom { background: linear-gradient(135deg, #d946ef 0%, #9333ea 100%); border: none; border-radius: 10px; padding: 12px 24px; font-weight: 600; color: white; transition: all 0.3s ease; text-decoration: none; }
        .btn-primary-custom:hover { background: linear-gradient(135deg, #c026d3 0%, #7c3aed 100%); transform: translateY(-1px); color: white; text-decoration: none; }
        .reference-card { background: white; border-radius: 15px; padding: 20px; margin-bottom: 20px; box-shadow: 0 4px 15px rgba(0,0,0,0.08); transition: all 0.3s ease; }
        .reference-card:hover { transform: translateY(-2px); box-shadow: 0 8px 25px rgba(0,0,0,0.12); }
        .reference-header { display: flex; justify-content: space-between; align-items: start; margin-bottom: 15px; }
        .reference-info h5 { color: #1f2937; font-weight: 600; margin-bottom: 5px; }
        .reference-meta { color: #6b7280; font-size: 14px; }
        .reference-status { padding: 6px 12px; border-radius: 20px; font-size: 12px; font-weight: 600; }
        .status-verified { background: #dcfce7; color: #166534; }
        .status-pending { background: #fef3c7; color: #92400e; }
        .status-completed { background: #dcfce7; color: #166534; }
        .status-draft { background: #e5e7eb; color: #374151; }
        .blockchain-badge { display: inline-flex; align-items: center; background: #e0e7ff; color: #3730a3; padding: 4px 8px; border-radius: 6px; font-size: 12px; font-weight: 500; margin-top: 10px; }
        .quick-actions { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 30px; }
        .quick-action-card { background: white; border-radius: 12px; padding: 20px; text-align: center; box-shadow: 0 4px 15px rgba(0,0,0,0.08); cursor: pointer; transition: all 0.3s ease; border: 2px solid transparent; }
        .quick-action-card:hover { border-color: #d946ef; transform: translateY(-2px); }
        .quick-action-icon { width: 50px; height: 50px; background: linear-gradient(135deg, #d946ef 0%, #9333ea 100%); border-radius: 50%; display: flex; align-items: center; justify-content: center; margin: 0 auto 15px; color: white; font-size: 24px; }
        .empty-state { text-align: center; padding: 60px 20px; color: #6b7280; }
        .empty-state-icon { font-size: 64px; margin-bottom: 20px; opacity: 0.5; }
        .filter-tabs { display: flex; gap: 10px; margin-bottom: 20px; }
        .filter-tab { padding: 8px 16px; background: white; border: 1px solid #e5e7eb; border-radius: 8px; cursor: pointer; transition: all 0.3s ease; font-size: 14px; font-weight: 500; }
        .filter-tab.active { background: #d946ef; color: white; border-color: #d946ef; }
        .navbar-custom { padding: 8px 0; }
        .dropdown-menu-custom { border: none; box-shadow: 0 10px 40px rgba(0,0,0,0.15); border-radius: 10px; }
        .notification-dropdown { 
            position: fixed !important; 
            top: 80px !important; 
            right: 20px !important; 
            background: white; 
            border-radius: 10px; 
            box-shadow: 0 20px 60px rgba(0,0,0,0.25); 
            width: 350px; 
            max-height: 400px; 
            overflow-y: auto; 
            z-index: 9999 !important; 
            display: none;
            border: 1px solid #e5e7eb;
        }
        .notification-header { 
            padding: 15px 20px; 
            border-bottom: 1px solid #e5e7eb; 
            font-weight: 600; 
            color: #1f2937; 
            background: #f9fafb;
            border-radius: 10px 10px 0 0;
        }
        .notification-item { padding: 15px 20px; border-bottom: 1px solid #f3f4f6; cursor: pointer; transition: background-color 0.3s ease; }
        .notification-item:hover { background: #f8fafc; }
        .notification-item.unread { background: #fef3c7; }
        .notification-title { font-weight: 600; color: #1f2937; margin-bottom: 5px; }
        .notification-message { color: #6b7280; font-size: 14px; margin-bottom: 5px; }
        .notification-time { color: #9ca3af; font-size: 12px; }
        .simulation-panel { background: #fef3c7; border: 1px solid #f59e0b; border-radius: 10px; padding: 15px; margin-bottom: 20px; }
        .simulation-title { font-weight: 600; color: #92400e; margin-bottom: 10px; }
        .simulation-actions { display: flex; gap: 10px; flex-wrap: wrap; }
        .simulation-btn { background: #f59e0b; color: white; border: none; padding: 8px 16px; border-radius: 6px; font-size: 14px; cursor: pointer; transition: all 0.3s ease; }
        .simulation-btn:hover { background: #d97706; }
    </style>
</head>
<body>
    <header class="dashboard-header">
        <div class="container">
            <div class="header-content">
                <div class="logo-section">
                    <img src="images/logo-white.png" alt="PeerProof">
                </div>
                <div class="user-section">
                    <div class="notification-badge">
                        <button class="notification-bell" id="notificationBtn">
                            🔔
                            <span class="notification-count" id="notificationCount">3</span>
                        </button>
                        <div class="notification-dropdown" id="notificationDropdown">
                            <div class="notification-header">Notifications</div>
                            <div id="notificationList">
                                <!-- Notifications will be populated here -->
                            </div>
                        </div>
                    </div>
                    <div class="wallet-info" id="wallet-display">
                        <span id="wallet-address">0x1234...5678</span>
                    </div>
                    <div class="dropdown">
                        <button class="btn btn-link text-white dropdown-toggle" type="button" id="userMenu" data-bs-toggle="dropdown">
                            <div style="width: 40px; height: 40px; background: rgba(255,255,255,0.2); border-radius: 50%; display: flex; align-items: center; justify-content: center;">
                                <span style="font-size: 18px;">👤</span>
                            </div>
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end dropdown-menu-custom">
                            <li><a class="dropdown-item" href="#" id="profile-link">Profile Settings</a></li>
                            <li><a class="dropdown-item" href="#" id="privacy-link">Privacy Controls</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" href="#" id="logout-link">Sign Out</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <main class="main-content">
        <div class="container">
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number" id="total-references">0</div>
                    <div class="stat-label">Total References</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="verified-references">0</div>
                    <div class="stat-label">Verified on Blockchain</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="pending-validations">0</div>
                    <div class="stat-label">Pending Validations</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="profile-views">0</div>
                    <div class="stat-label">Profile Views This Month</div>
                </div>
            </div>

            <div class="section-header">
                <h3 class="section-title">Quick Actions</h3>
                <a href="request-reference.html" class="btn btn-primary-custom">
                    + Request New Reference
                </a>
            </div>
            
            <div class="quick-actions">
                <div class="quick-action-card" id="create-reference-action">
                    <div class="quick-action-icon">📝</div>
                    <h6>Request New Reference</h6>
                    <p style="color: #6b7280; font-size: 14px; margin: 0;">Ask a colleague or supervisor for a reference</p>
                </div>
                
                <div class="quick-action-card" id="manage-references-action">
                    <div class="quick-action-icon">⚙️</div>
                    <h6>Manage References</h6>
                    <p style="color: #6b7280; font-size: 14px; margin: 0;">View, edit, and control your references</p>
                </div>
                
                <div class="quick-action-card" id="share-profile-action">
                    <div class="quick-action-icon">🔗</div>
                    <h6>Share Profile</h6>
                    <p style="color: #6b7280; font-size: 14px; margin: 0;">Generate shareable link for employers</p>
                </div>
                
                <div class="quick-action-card" id="privacy-settings-action">
                    <div class="quick-action-icon">🛡️</div>
                    <h6>Privacy Settings</h6>
                    <p style="color: #6b7280; font-size: 14px; margin: 0;">Control what information is visible</p>
                </div>
            </div>

            <div class="section-header">
                <h3 class="section-title">Your References</h3>
            </div>

            <div class="filter-tabs">
                <div class="filter-tab active" data-filter="all">All</div>
                <div class="filter-tab" data-filter="verified">Verified</div>
                <div class="filter-tab" data-filter="pending">Pending</div>
                <div class="filter-tab" data-filter="completed">Completed</div>
                <div class="filter-tab" data-filter="draft">Drafts</div>
            </div>

            <div id="references-container">
                <!-- References will be loaded here -->
            </div>

            <!-- SIMULATION TESTING PANEL -->
            <div class="simulation-panel">
                <div class="simulation-title">🧪 Testing Panel - Simulate Full Flow</div>
                <div class="simulation-actions">
                    <button class="simulation-btn" onclick="simulateRefereeEmail()">📧 Open Referee Email</button>
                    <button class="simulation-btn" onclick="simulateReferenceCompletion()">✅ Simulate Reference Completed</button>
                    <button class="simulation-btn" onclick="openManagementPage()">⚙️ Manage References</button>
                    <button class="simulation-btn" onclick="clearTestData()">🗑️ Clear Test Data</button>
                </div>
            </div>
        </div>
    </main>

    <script src="js/jquery-3.6.0.min.js"></script>
    <script src="js/bootstrap.min.js"></script>
    <script>
        class PeerProofDashboard {
            constructor() { this.currentUser = null; this.references = []; this.notifications = []; this.init(); }
            
            async init() {
                await this.checkAuth();
                await this.loadUserData();
                this.setupEventListeners();
                await this.loadReferences();
                this.loadNotifications();
                this.checkForUpdates();
            }

            checkForUpdates() {
                const urlParams = new URLSearchParams(window.location.search);
                if (urlParams.get('updated') === 'true') {
                    this.loadUserData(); this.loadReferences();
                    window.history.replaceState({}, document.title, window.location.pathname);
                }
            }

            async checkAuth() {
                let authData = localStorage.getItem('peerproof_auth');
                if (!authData) {
                    const mockAuth = { address: '0x1234567890abcdef1234567890abcdef12345678', authProvider: 'development', isSmartWallet: false, createdAt: Date.now() };
                    localStorage.setItem('peerproof_auth', JSON.stringify(mockAuth));
                    authData = JSON.stringify(mockAuth);
                }
                this.currentUser = JSON.parse(authData);
                this.updateWalletDisplay();
            }

            updateWalletDisplay() {
                const walletDisplay = document.getElementById('wallet-address');
                if (this.currentUser && this.currentUser.address) {
                    const address = this.currentUser.address;
                    walletDisplay.textContent = `${address.slice(0, 6)}...${address.slice(-4)}`;
                }
            }

            setupEventListeners() {
                document.getElementById('create-reference-action').addEventListener('click', () => { this.createNewReference(); });
                document.getElementById('manage-references-action').addEventListener('click', () => { this.openManagementPage(); });
                document.getElementById('share-profile-action').addEventListener('click', () => { this.shareProfile(); });
                document.getElementById('privacy-settings-action').addEventListener('click', () => { this.openPrivacySettings(); });
                
                document.querySelectorAll('.filter-tab').forEach(tab => {
                    tab.addEventListener('click', (e) => { this.filterReferences(e.target.dataset.filter); });
                });

                document.getElementById('logout-link').addEventListener('click', (e) => { e.preventDefault(); this.logout(); });
                
                // Notification dropdown
                document.getElementById('notificationBtn').addEventListener('click', () => { this.toggleNotifications(); });
                document.addEventListener('click', (e) => {
                    if (!e.target.closest('.notification-badge')) {
                        document.getElementById('notificationDropdown').style.display = 'none';
                    }
                });
            }

            async loadUserData() {
                try {
                    // Load stats from stored requests
                    const storedRequests = JSON.parse(localStorage.getItem('peerproof_requests') || '[]');
                    
                    // Calculate stats from actual data
                    const totalReferences = storedRequests.length;
                    const pendingReferences = storedRequests.filter(r => r.status === 'pending').length;
                    const completedReferences = storedRequests.filter(r => r.status === 'completed').length;
                    
                    this.updateStats({
                        totalReferences: totalReferences,
                        verifiedReferences: completedReferences,
                        pendingValidations: pendingReferences,
                        profileViews: 145 // Static for demo
                    });
                } catch (error) {
                    console.error('Error loading user data:', error);
                    this.updateStats({ totalReferences: 0, verifiedReferences: 0, pendingValidations: 0, profileViews: 0 });
                }
            }

            updateStats(stats) {
                document.getElementById('total-references').textContent = stats.totalReferences;
                document.getElementById('verified-references').textContent = stats.verifiedReferences;
                document.getElementById('pending-validations').textContent = stats.pendingValidations;
                document.getElementById('profile-views').textContent = stats.profileViews;
            }

            async loadReferences() {
                try {
                    // Load references from stored requests
                    const storedRequests = JSON.parse(localStorage.getItem('peerproof_requests') || '[]');
                    
                    // Convert requests to reference format
                    this.references = storedRequests.map(request => ({
                        id: request.id,
                        refereeName: request.refereeName,
                        position: request.refereePosition,
                        company: request.refereeCompany || request.applicantCompany,
                        status: request.status || 'pending',
                        createdAt: request.createdAt,
                        blockchainTx: null,
                        validations: 0,
                        referenceType: `${request.referenceType} Reference`,
                        kpis: request.selectedKPIs || []
                    }));

                    // Add any completed references from dashboardData
                    const dashboardData = JSON.parse(localStorage.getItem('dashboardData') || '{}');
                    if (dashboardData.references) {
                        this.references = [...this.references, ...dashboardData.references];
                    }

                    this.renderReferences();
                } catch (error) {
                    console.error('Error loading references:', error);
                    this.showEmptyState();
                }
            }

            renderReferences(filter = 'all') {
                const container = document.getElementById('references-container');
                
                let filteredReferences = this.references;
                if (filter !== 'all') {
                    filteredReferences = this.references.filter(ref => ref.status === filter);
                }

                if (filteredReferences.length === 0) {
                    this.showEmptyState();
                    return;
                }

                const referencesHTML = filteredReferences.map(ref => `
                    <div class="reference-card" data-id="${ref.id}">
                        <div class="reference-header">
                            <div class="reference-info">
                                <h5>${ref.refereeName}</h5>
                                <div class="reference-meta">
                                    ${ref.position} at ${ref.company} • ${this.formatDate(ref.createdAt)}
                                </div>
                                ${ref.blockchainTx ? `<div class="blockchain-badge">⛓️ Verified on Blockchain</div>` : ''}
                            </div>
                            <div class="reference-status status-${ref.status}">
                                ${this.getStatusText(ref.status)}
                            </div>
                        </div>
                        
                        <div class="reference-content">
                            <p style="color: #6b7280; margin: 0;">
                                ${ref.validations} peer validations • 
                                <a href="#" onclick="dashboard.viewReference('${ref.id}')">View Details</a> • 
                                <a href="#" onclick="dashboard.shareReference('${ref.id}')">Share</a> •
                                <a href="reference-management-page.html" style="color: #d946ef;">Manage</a>
                            </p>
                        </div>
                    </div>
                `).join('');

                container.innerHTML = referencesHTML;
            }

            showEmptyState() {
                const container = document.getElementById('references-container');
                container.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-state-icon">📋</div>
                        <h5>No references found</h5>
                        <p>Start building your professional reputation by requesting your first reference.</p>
                        <a href="request-reference.html" class="btn btn-primary-custom mt-3">
                            Request Your First Reference
                        </a>
                    </div>
                `;
            }

            filterReferences(filter) {
                document.querySelectorAll('.filter-tab').forEach(tab => {
                    tab.classList.toggle('active', tab.dataset.filter === filter);
                });
                this.renderReferences(filter);
            }

            getStatusText(status) {
                const statusMap = { 'verified': 'Verified', 'pending': 'Pending', 'completed': 'Completed', 'draft': 'Draft' };
                return statusMap[status] || status;
            }

            formatDate(dateString) {
                const date = new Date(dateString);
                return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
            }

            loadNotifications() {
                this.notifications = JSON.parse(localStorage.getItem('userNotifications') || '[]');
                this.updateNotificationCount();
                this.renderNotifications();
            }

            updateNotificationCount() {
                const unreadCount = this.notifications.filter(n => !n.isRead).length;
                const countElement = document.getElementById('notificationCount');
                countElement.textContent = unreadCount;
                countElement.style.display = unreadCount > 0 ? 'flex' : 'none';
            }

            renderNotifications() {
                const container = document.getElementById('notificationList');
                if (this.notifications.length === 0) {
                    container.innerHTML = '<div style="padding: 20px; text-align: center; color: #6b7280;">No notifications yet</div>';
                    return;
                }

                container.innerHTML = this.notifications.slice(0, 10).map(notification => `
                    <div class="notification-item ${!notification.isRead ? 'unread' : ''}" onclick="dashboard.handleNotificationClick('${notification.id}')">
                        <div class="notification-title">${notification.title}</div>
                        <div class="notification-message">${notification.message}</div>
                        <div class="notification-time">${this.formatDate(notification.timestamp)}</div>
                    </div>
                `).join('');
            }

            toggleNotifications() {
                // Remove existing dropdown if present
                const existingDropdown = document.getElementById('dynamicNotificationDropdown');
                if (existingDropdown) {
                    existingDropdown.remove();
                    return;
                }

                // Create dropdown dynamically and append to body
                const dropdown = document.createElement('div');
                dropdown.id = 'dynamicNotificationDropdown';
                dropdown.style.cssText = `
                    position: fixed !important;
                    top: 80px !important;
                    right: 20px !important;
                    background: white !important;
                    border-radius: 10px !important;
                    box-shadow: 0 20px 60px rgba(0,0,0,0.25) !important;
                    width: 350px !important;
                    max-height: 400px !important;
                    overflow-y: auto !important;
                    z-index: 999999 !important;
                    border: 1px solid #e5e7eb !important;
                `;

                // Add header
                const header = document.createElement('div');
                header.style.cssText = `
                    padding: 15px 20px;
                    border-bottom: 1px solid #e5e7eb;
                    font-weight: 600;
                    color: #1f2937;
                    background: #f9fafb;
                    border-radius: 10px 10px 0 0;
                `;
                header.textContent = 'Notifications';
                dropdown.appendChild(header);

                // Add notifications list
                const listContainer = document.createElement('div');
                if (this.notifications.length === 0) {
                    listContainer.innerHTML = '<div style="padding: 20px; text-align: center; color: #6b7280;">No notifications yet</div>';
                } else {
                    listContainer.innerHTML = this.notifications.slice(0, 10).map(notification => `
                        <div class="dynamic-notification-item" onclick="dashboard.handleNotificationClick('${notification.id}')" style="
                            padding: 15px 20px;
                            border-bottom: 1px solid #f3f4f6;
                            cursor: pointer;
                            transition: background-color 0.3s ease;
                            ${!notification.isRead ? 'background: #fef3c7;' : ''}
                        " onmouseover="this.style.background='#f8fafc'" onmouseout="this.style.background='${!notification.isRead ? '#fef3c7' : 'white'}'">
                            <div style="font-weight: 600; color: #1f2937; margin-bottom: 5px;">${notification.title}</div>
                            <div style="color: #6b7280; font-size: 14px; margin-bottom: 5px;">${notification.message}</div>
                            <div style="color: #9ca3af; font-size: 12px;">${this.formatDate(notification.timestamp)}</div>
                        </div>
                    `).join('');
                }
                dropdown.appendChild(listContainer);

                // Append to body for maximum z-index
                document.body.appendChild(dropdown);

                // Close when clicking outside
                setTimeout(() => {
                    document.addEventListener('click', function closeDropdown(e) {
                        if (!e.target.closest('#dynamicNotificationDropdown') && !e.target.closest('.notification-badge')) {
                            const dropdown = document.getElementById('dynamicNotificationDropdown');
                            if (dropdown) {
                                dropdown.remove();
                            }
                            document.removeEventListener('click', closeDropdown);
                        }
                    });
                }, 100);
            }

            handleNotificationClick(notificationId) {
                const notification = this.notifications.find(n => n.id === notificationId);
                if (notification && !notification.isRead) {
                    notification.isRead = true;
                    localStorage.setItem('userNotifications', JSON.stringify(this.notifications));
                    this.updateNotificationCount();
                    this.renderNotifications();
                }

                if (notification && notification.actions) {
                    const firstAction = notification.actions[0];
                    if (firstAction.action === 'view_reference') {
                        this.viewReference(firstAction.referenceId);
                    } else if (firstAction.action === 'manage_reference') {
                        this.openManagementPage();
                    }
                }
            }

            createNewReference() { window.location.href = 'request-reference.html'; }
            openManagementPage() { window.location.href = 'reference-management-page.html'; }

            viewReference(id) { alert(`Viewing reference ${id}`); }

            shareReference(id) {
                const shareUrl = `https://peerproof.com/reference/${id}`;
                navigator.clipboard.writeText(shareUrl);
                alert('Reference link copied to clipboard!');
            }

            shareProfile() {
                const profileUrl = `https://peerproof.com/profile/${this.currentUser.address}`;
                navigator.clipboard.writeText(profileUrl);
                alert('Profile link copied to clipboard!');
            }

            openPrivacySettings() { alert('Opening privacy settings...'); }

            logout() {
                localStorage.removeItem('peerproof_auth');
                localStorage.removeItem('peerproof_wallet');
                window.location.href = 'index.html';
            }
        }

        // Global functions for simulation
        function simulateRefereeEmail() {
            window.open('referee-email-simulation.html', '_blank');
        }

        function simulateReferenceCompletion() {
            // Simulate a reference being completed
            let dashboardData = JSON.parse(localStorage.getItem('dashboardData') || '{}');
            
            if (!dashboardData.references) {
                dashboardData.references = [];
            }

            const newReference = {
                id: 'ref-' + Date.now(),
                refereeName: 'Sarah Johnson',
                refereeTitle: 'Senior Product Manager',
                status: 'completed',
                completedDate: new Date().toISOString(),
                ratings: { leadership: 5, innovation: 4, communication: 5, delivery: 4 },
                overallScore: 4.5,
                blockchainHash: 'mock-hash-' + Math.random().toString(36).substr(2, 9),
                canRectify: true,
                type: 'proactive'
            };

            dashboardData.references.push(newReference);
            dashboardData.stats = {
                totalReferences: dashboardData.references.length,
                completedReferences: dashboardData.references.filter(r => r.status === 'completed').length,
                pendingReferences: dashboardData.references.filter(r => r.status === 'pending').length,
                averageRating: 4.5
            };

            localStorage.setItem('dashboardData', JSON.stringify(dashboardData));

            // Add notification
            let notifications = JSON.parse(localStorage.getItem('userNotifications') || '[]');
            notifications.unshift({
                id: 'notif-' + Date.now(),
                type: 'reference_completed',
                title: 'New Reference Completed! 🎉',
                message: 'Sarah Johnson has completed your professional reference.',
                timestamp: new Date().toISOString(),
                isRead: false,
                actions: [
                    { label: 'View Reference', action: 'view_reference', referenceId: newReference.id },
                    { label: 'Manage Reference', action: 'manage_reference', referenceId: newReference.id }
                ]
            });
            localStorage.setItem('userNotifications', JSON.stringify(notifications));

            alert('✅ Reference completion simulated! Check your notifications and dashboard.');
            location.reload();
        }

        function openManagementPage() {
            window.location.href = 'reference-management-page.html';
        }

        function clearTestData() {
            if (confirm('Are you sure you want to clear all test data?')) {
                localStorage.removeItem('dashboardData');
                localStorage.removeItem('peerproof_requests');
                localStorage.removeItem('userNotifications');
                localStorage.removeItem('peerproof_stats');
                alert('Test data cleared!');
                location.reload();
            }
        }

        // Initialize dashboard
        let dashboard;
        document.addEventListener('DOMContentLoaded', () => {
            dashboard = new PeerProofDashboard();
        });
<!-- Ethers.js v5 -->
<script src="https://cdn.ethers.io/lib/ethers-5.7.2.umd.min.js"></script>

<!-- PeerProof Blockchain -->
<script src="js/contracts-config.js"></script>
<script src="js/contract-abi.js"></script>
<script src="js/blockchain-service.js"></script>
    </script>
</body>
</html>
