/**
 * BACKEND SERVICE: Wallet Creation con Base SDK
 * HRkey - Automatic Wallet Creation for Social Login Users
 */

import { createClient } from '@supabase/supabase-js';
import { ethers } from 'ethers';
import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';

dotenv.config();

// ================================
// CONFIGURACIÓN
// ================================

const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY;
const BASE_RPC_URL = process.env.BASE_RPC_URL || 'https://mainnet.base.org';
const PORT = process.env.PORT || 3001;

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

// ================================
// WALLET CREATION SERVICE
// ================================

class WalletCreationService {
    
    /**
     * Crea una wallet en Base Network para un usuario
     */
    static async createWalletForUser(userId, email) {
        try {
            console.log(`🔧 Creating wallet for user ${userId} (${email})...`);
            
            // 1. Verificar si el usuario ya tiene una wallet
            const existingWallet = await this.checkExistingWallet(userId);
            if (existingWallet) {
                console.log('✅ User already has a wallet:', existingWallet.address);
                return existingWallet;
            }
            
            // 2. Crear nueva wallet usando ethers.js
            const wallet = ethers.Wallet.createRandom();
            
            // 3. Encriptar la private key
            const encryptedPrivateKey = await this.encryptPrivateKey(
                wallet.privateKey, 
                userId
            );
            
            // 4. Guardar en Supabase
            const walletData = {
                user_id: userId,
                address: wallet.address,
                encrypted_private_key: encryptedPrivateKey,
                network: 'base-mainnet',
                wallet_type: 'custodial',
                is_active: true,
                created_at: new Date().toISOString()
            };
            
            const { data, error } = await supabase
                .from('user_wallets')
                .insert([walletData])
                .select()
                .single();
            
            if (error) throw error;
            
            console.log('✅ Wallet created successfully:', wallet.address);
            
            // 5. Inicializar plan FREE
            await this.initializeUserPlan(userId, wallet.address);
            
            return {
                address: wallet.address,
                network: 'base-mainnet',
                walletType: 'custodial',
                createdAt: walletData.created_at
            };
            
        } catch (error) {
            console.error('❌ Error creating wallet:', error);
            throw new Error(`Failed to create wallet: ${error.message}`);
        }
    }
    
    /**
     * Verifica si el usuario ya tiene una wallet
     */
    static async checkExistingWallet(userId) {
        const { data, error } = await supabase
            .from('user_wallets')
            .select('*')
            .eq('user_id', userId)
            .eq('is_active', true)
            .single();
        
        if (error && error.code !== 'PGRST116') throw error;
        
        return data;
    }
    
    /**
     * Encripta la private key
     */
    static async encryptPrivateKey(privateKey, userId) {
        const crypto = await import('crypto');
        
        const algorithm = 'aes-256-cbc';
        const key = crypto.scryptSync(userId, 'hrkey-salt-2025', 32);
        const iv = crypto.randomBytes(16);
        
        const cipher = crypto.createCipheriv(algorithm, key, iv);
        let encrypted = cipher.update(privateKey, 'utf8', 'hex');
        encrypted += cipher.final('hex');
        
        return iv.toString('hex') + ':' + encrypted;
    }
    
    /**
     * Inicializa el plan FREE para el nuevo usuario
     */
    static async initializeUserPlan(userId, walletAddress) {
        const planData = {
            user_id: userId,
            address: walletAddress,
            plan: 'free',
            references_used: 0,
            references_limit: 1,
            features: {
                canUseBlockchain: false,
                canAddPeerValidations: false,
                canAddCustomerValidations: false,
                canProfitFromData: false,
                canShareReferences: true
            },
            payment_tx_hash: null,
            created_at: new Date().toISOString()
        };
        
        const { error } = await supabase
            .from('user_plans')
            .insert([planData]);
        
        if (error) throw error;
        
        console.log('✅ FREE plan initialized for user');
    }
    
    /**
     * Obtiene la wallet de un usuario
     */
    static async getUserWallet(userId) {
        const { data, error } = await supabase
            .from('user_wallets')
            .select('address, network, wallet_type, created_at')
            .eq('user_id', userId)
            .eq('is_active', true)
            .single();
        
        if (error) throw error;
        
        return data;
    }
}

// ================================
// EXPRESS API
// ================================

const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// Health check
app.get('/health', (req, res) => {
    res.json({ 
        status: 'ok', 
        service: 'HRkey Wallet Creation Service',
        timestamp: new Date().toISOString()
    });
});

/**
 * POST /api/wallet/create
 * Crea una wallet para un usuario después del social login
 */
app.post('/api/wallet/create', async (req, res) => {
    try {
        const { userId, email } = req.body;
        
        console.log('📥 Received wallet creation request:', { userId, email });
        
        if (!userId || !email) {
            return res.status(400).json({ 
                error: 'Missing userId or email' 
            });
        }
        
        // Crear wallet
        const wallet = await WalletCreationService.createWalletForUser(userId, email);
        
        res.json({
            success: true,
            wallet: {
                address: wallet.address,
                network: wallet.network,
                walletType: wallet.walletType
            }
        });
        
    } catch (error) {
        console.error('❌ Error in /api/wallet/create:', error);
        res.status(500).json({ 
            error: error.message 
        });
    }
});

/**
 * GET /api/wallet/:userId
 * Obtiene la wallet de un usuario
 */
app.get('/api/wallet/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        
        const wallet = await WalletCreationService.getUserWallet(userId);
        
        if (!wallet) {
            return res.status(404).json({ 
                error: 'Wallet not found' 
            });
        }
        
        res.json({
            success: true,
            wallet
        });
        
    } catch (error) {
        console.error('❌ Error in /api/wallet/:userId:', error);
        res.status(500).json({ 
            error: error.message 
        });
    }
});

// Start server
app.listen(PORT, () => {
    console.log(`
    ╔══════════════════════════════════════════════════════╗
    ║  🚀 HRkey Wallet Creation Service                    ║
    ║  ✅ Running on http://localhost:${PORT}                ║
    ║  📡 Connected to Supabase                            ║
    ║  🔗 Base Network: ${BASE_RPC_URL === 'https://mainnet.base.org' ? 'Mainnet' : 'Sepolia'}    ║
    ╚══════════════════════════════════════════════════════╝
    `);
});

export default WalletCreationService;
